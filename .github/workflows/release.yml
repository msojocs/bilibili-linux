name: Build Packages

on:
  release:
    types: [published]
  push:
    tags:
      - v*
    branches: [master, dev]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build-src:
    name: Build Base Packages
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ARCH: ["x86_64"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Prepare
        run: |
          sudo apt install wget exiftool
          sudo npm install asar -g
          echo "$UID, $GID"

      - name: Generate TAG
        id: Tag
        run: |
          tag='continuous'
          name='Continuous Build'
          if [ 'true' == ${{ startsWith(github.ref, 'refs/tags/') }} ];then
            tag='${{ github.ref_name }}'
            name='${{ github.ref_name }}'
          fi
          echo "tag result: $tag - $name"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          ls -l
          tools/setup-bilibili

      - name: Compress Resources
        run: |
          ls -l
          mkdir -p tmp/src
          mkdir -p tmp/build
          tar -zcf tmp/src/bilibili-${{ steps.tag.outputs.tag }}-${{ matrix.ARCH }}.tar.gz bin app electron
          tar -zcf tmp/build/extensions-${{ steps.tag.outputs.tag }}.tar.gz extensions

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bilibili-${{ matrix.ARCH }}.src
          path: tmp/src
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bilibili-${{ matrix.ARCH }}.build
          path: tmp/build

  build-linux:
    name: Build Linux
    needs:
      - build-src
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ARCH: ["x86_64"]

    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Prepare
        run: |
          sudo npm install asar -g
          npm install
          echo "$UID, $GID"

      - name: Generate TAG
        id: Tag
        run: |
          tag='continuous'
          name='Continuous Build'
          if [ 'true' == ${{ startsWith(github.ref, 'refs/tags/') }} ];then
            tag='${{ github.ref_name }}'
            name='${{ github.ref_name }}'
          fi
          echo "tag result: $tag - $name"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Build
        env:
          BUILD_VERSION: ${{ steps.tag.outputs.tag }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -l
          mkdir -p tmp/build
          tools/build-prepare.sh
          asar e app/app.asar app/app
          npm run pkg-linux
          rm -rf tmp/build/linux-unpacked

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bilibili-${{ matrix.ARCH }}.build
          path: tmp/build

  build-win:
    name: Build Windows
    needs:
      - build-src
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        ARCH: ["x86_64"]

    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Prepare
        run: |
          sudo npm install asar -g
          sudo apt update
          sudo apt install wine64
          sudo dpkg --add-architecture i386 
          sudo apt-get update 
          sudo apt-get install libwine wine32
          npm install
          echo "$UID, $GID"

      - name: Generate TAG
        id: Tag
        run: |
          tag='continuous'
          name='Continuous Build'
          if [ 'true' == ${{ startsWith(github.ref, 'refs/tags/') }} ];then
            tag='${{ github.ref_name }}'
            name='${{ github.ref_name }}'
          fi
          echo "tag result: $tag - $name"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Build
        env:
          BUILD_VERSION: ${{ steps.tag.outputs.tag }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -l
          mkdir -p tmp/build
          tools/build-prepare.sh
          asar e app/app.asar app/app
          npm run pkg-win
          rm -rf tmp/build/win-unpacked

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bilibili-${{ matrix.ARCH }}.build
          path: tmp/build

  build-deepin:
    name: Build Deepin Package
    needs:
      - build-src
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        ARCH: ["x86_64", "ARM64"]

    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Prepare
        run: |
          sudo apt-get install -y build-essential fakeroot devscripts debhelper # debmake lintian pbuilder

      - name: Generate TAG
        id: Tag
        run: |
          tag='continuous'
          name='Continuous Build'
          if [ 'true' == ${{ startsWith(github.ref, 'refs/tags/') }} ];then
            tag='${{ github.ref_name }}'
            name='${{ github.ref_name }}'
          else
            BILIBILI_VERSION=$(cat conf/bilibili_version)
            tag="v${BILIBILI_VERSION}-${tag}"
          fi
          echo "tag result: $tag - $name"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Build Deb Package
        run: |
          export BUILD_VERSION=${{ steps.tag.outputs.tag }}
          ls -l
          mkdir -p tmp/build
          tools/build-prepare.sh
          echo "${{ matrix.ARCH }}"
          if [ "${{ matrix.ARCH }}" == "ARM64" ];then
            export BUILD_ARCH="arm64"
            export LD_LIBRARY_PATH="/usr/aarch64-linux-gnu/lib"
            tools/update-electron
          else
            export BUILD_ARCH="amd64"
          fi
          tools/build-deepin.sh ${{ steps.tag.outputs.tag }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bilibili-${{ matrix.ARCH }}.build
          path: tmp/build

  upload:
    name: Create release and upload artifacts
    needs:
      - build-src
      - build-linux
      - build-win
      - build-deepin
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Inspect directory after downloading artifacts
        run: ls -alFR

      - name: Generate TAG
        id: Tag
        run: |
          tag='continuous'
          name='Continuous Build'
          if [ 'true' == ${{ startsWith(github.ref, 'refs/tags/') }} ];then
            tag='${{ github.ref_name }}'
            name='${{ github.ref_name }}'
          fi
          echo "tag result: $tag - $name"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Create release and upload artifacts
        if: startsWith(github.ref, 'refs/heads/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt install -y fuse
          wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
          chmod +x pyuploadtool-x86_64.AppImage
          ./pyuploadtool-x86_64.AppImage \
          **src/*.tar.gz \
          **build/*.tar.gz \
          **build/*.AppImage \
          **build/*.deb \
          **build/*.exe \

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ steps.tag.outputs.name }}
          tag_name: ${{ steps.tag.outputs.tag }}
          files: |
            **src/*.tar.gz
            **build/*.tar.gz
            **build/*.AppImage
            **build/*.deb
            **build/*.exe
